diff --git a/toolkit/mozapps/update/UpdateService.sys.mjs b/toolkit/mozapps/update/UpdateService.sys.mjs
index 26d633f4f4fe9..2e842bba0d2da 100644
--- a/toolkit/mozapps/update/UpdateService.sys.mjs
+++ b/toolkit/mozapps/update/UpdateService.sys.mjs
@@ -16,6 +16,21 @@ import {
 import { FileUtils } from "resource://gre/modules/FileUtils.sys.mjs";
 import { XPCOMUtils } from "resource://gre/modules/XPCOMUtils.sys.mjs";
 
+/**
+ * * NORANEKO PATCH - 0.1.0
+ * * [UPDATER]
+ * * (add version2 for updating source without rebuilding binary)
+ * * START
+ */
+import { NoranekoConstants } from "resource://noraneko/modules/NoranekoConstants.sys.mjs"
+/**
+ * * NORANEKO PATCH - 0.1.0
+ * * [UPDATER]
+ * * END
+ */
+
+// MARK: defines
+
 const lazy = {};
 
 ChromeUtils.defineESModuleGetters(lazy, {
@@ -306,6 +321,10 @@ let gOnlyDownloadUpdatesThisSession = false;
 // This will be the backing for `nsIApplicationUpdateService.currentState`
 var gUpdateState = Ci.nsIApplicationUpdateService.STATE_IDLE;
 
+
+
+// MARK: utilities
+
 /**
  * Simple container and constructor for a Promise and its resolve function.
  */
@@ -1818,15 +1837,160 @@ function pingStateAndStatusCodes(aUpdate, aStartup, aStatus) {
   AUSTLMY.pingStateCode(suffix, stateCode);
 }
 
+/**
+ * * NORANEKO PATCH - 0.1.0
+ * * [UPDATER]
+ * * (add version2 for updating source without rebuilding binary)
+ * * START
+ */
+
+/**
+ * @typedef {[number, number, number]} NRVersion2
+ */
+
+/**
+ * check  for compare
+ * @param {string} A
+ * @returns {NRVersion2 | null}
+ */
+function parseVersion2(A) {
+  try {
+    if (!A) {
+      return null;
+    }
+    let match = /^([0-9]+)\.([0-9]+)\.([0-9]+)$/.exec(A);
+    if (!match) {
+      return null;
+    }
+    let semverA = match.slice(1).map((p)=>parseInt(p,10));
+    return semverA;
+  } catch {
+    return null;
+  }
+}
+
+/**
+ * compare version2 that is added for noraneko
+ * - 0 A=B
+ * - 1 A<B
+ * - -1 A>B
+ * - null A.length !== 3 || B.length !== 3
+ * @param {NRVersion2} A
+ * @param {NRVersion2} B
+ * @param {"<" | "==" | ">" | "<=" | ">="} mode
+ * @returns {boolean}
+ */
+function compareVersion2(A, B, mode) {
+
+  /**
+   * @type {"A==B" | "no_value" | "A>B" | "A<B"}
+   */
+  let lastStatus = "A==B";
+  if (!A || !B) {
+    lastStatus = "no_value"
+    return false;
+  } else {
+    [...Array(3)].forEach((_,index)=>{
+      if (lastStatus == "A==B") {
+        if (A[index] == B[index]) {
+          lastStatus = "A==B";
+        } else if (A[index] > B[index]) {
+          lastStatus = "A>B";
+        } else if (A[index] < B[index]) {
+          lastStatus = "A<B";
+        }
+      }
+    });
+  }
+
+  switch (mode) {
+    case "==":
+      return lastStatus === "A==B";
+    case "<":
+      return lastStatus === "A<B";
+    case "<=":
+      return lastStatus === "A==B" || lastStatus === "A<B";
+    case ">":
+      return lastStatus === "A>B";
+    case ">=":
+      return lastStatus === "A==B" || lastStatus === "A>B";
+    default:
+      return false;
+  }
+}
+
+/**
+ * * NORANEKO PATCH - 0.1.0
+ * * [UPDATER]
+ * * END
+ */
+
 /**
  * This returns true if the passed update is the same version or older than the
  * version and build ID values passed. Otherwise it returns false.
+ *
+ * *#####*
+ * * NORANEKO PATCH - 0.1.0
+ * * [UPDATER]
+ * * (add version2 for updating source without rebuilding binary)
+ * * START
+ * *#####*
+ * @param {nsIUpdate} update
+ * @param {NRVersion2 | null} version2
+ * *#####*
+ * * NORANEKO PATCH - 0.1.0
+ * * [UPDATER]
+ * * END
+ * *#####*
  */
-function updateIsAtLeastAsOldAs(update, version, buildID) {
+function updateIsAtLeastAsOldAs(update, version, buildID
+  /**
+  * * NORANEKO PATCH - 0.1.0
+  * * [UPDATER]
+  * * (add version2 for updating source without rebuilding binary)
+  * * START
+  */
+  , version2 = null
+  , buildID2 = null
+  /**
+   * * NORANEKO PATCH - 0.1.0
+   * * [UPDATER]
+   * * END
+   */
+) {
   if (!update || !update.appVersion || !update.buildID) {
     return false;
   }
   let versionComparison = Services.vc.compare(update.appVersion, version);
+  /**
+   * * NORANEKO PATCH - 0.1.0
+   * * [UPDATER]
+   * * (add version2 for updating source without rebuilding binary)
+   * * START
+   */
+  let update_appVersion2 = parseVersion2(update.appVersion2)
+  let self_version2 = parseVersion2(version2);
+
+  if (update_appVersion2 && self_version2) {
+    if (versionComparison == 0) {
+      if (compareVersion2(update_appVersion2, self_version2, ">")) {
+        return false;
+      }
+      if (compareVersion2(update_appVersion2,self_version2,"<")) {
+        return true;
+      }
+      if (update.buildID == buildID) {
+        if (buildID2 != null && update.buildID2 != null && update.buildID2 != buildID2) {
+          return false
+        }
+      }
+    }
+  }
+  /**
+   * * NORANEKO PATCH - 0.1.0
+   * * [UPDATER]
+   * * END
+   */
   return (
     versionComparison < 0 ||
     (versionComparison == 0 && update.buildID == buildID)
@@ -1836,12 +2000,26 @@ function updateIsAtLeastAsOldAs(update, version, buildID) {
 /**
  * This returns true if the passed update is the same version or older than
  * currently installed Firefox version.
+ * @param {nsIUpdate} update
  */
 function updateIsAtLeastAsOldAsCurrentVersion(update) {
   return updateIsAtLeastAsOldAs(
     update,
     Services.appinfo.version,
     Services.appinfo.appBuildID
+    /**
+     * * NORANEKO PATCH - 0.1.0
+     * * [UPDATER]
+     * * (add version2 for updating source without rebuilding binary)
+     * * START
+     */
+    , NoranekoConstants.version2
+    , NoranekoConstants.buildID2
+    /**
+     * * NORANEKO PATCH - 0.1.0
+     * * [UPDATER]
+     * * END
+     */
   );
 }
 
@@ -1862,6 +2040,19 @@ function updateIsAtLeastAsOldAsReadyUpdate(update) {
     update,
     lazy.UM.internal.readyUpdate.appVersion,
     lazy.UM.internal.readyUpdate.buildID
+    /**
+     * * NORANEKO PATCH - 0.1.0
+     * * [UPDATER]
+     * * (add version2 for updating source without rebuilding binary)
+     * * START
+     */
+    , lazy.UM.internal.readyUpdate.appVersion2
+    , lazy.UM.internal.readyUpdate.buildID2
+    /**
+     * * NORANEKO PATCH - 0.1.0
+     * * [UPDATER]
+     * * END
+     */
   );
 }
 
@@ -1968,6 +2159,10 @@ function pollForStagingEnd() {
   lazy.setTimeout(pollingFn, pollingIntervalMs);
 }
 
+
+
+// MARK: UpdatePatch
+
 class UpdatePatch {
   // nsIUpdatePatch attribute names used to prevent nsIWritablePropertyBag from
   // over writing nsIUpdatePatch attributes.
@@ -2168,6 +2363,10 @@ class UpdatePatch {
   ]);
 }
 
+
+
+// MARK: Update
+
 class Update {
   // nsIUpdate attribute names used to prevent nsIWritablePropertyBag from over
   // writing nsIUpdate attributes.
@@ -2190,6 +2389,19 @@ class Update {
     "type",
     "unsupported",
     "platformVersion",
+    /**
+     * * NORANEKO PATCH - 0.1.0
+     * * [UPDATER]
+     * * (add version2 for updating source without rebuilding binary)
+     * * START
+     */
+    "appVersion2",
+    "buildID2",
+    /**
+     * * NORANEKO PATCH - 0.1.0
+     * * [UPDATER]
+     * * END
+     */
   ];
 
   /**
@@ -2287,6 +2499,19 @@ class Update {
           case "statusText":
           case "type":
           case "platformVersion":
+          /**
+           * * NORANEKO PATCH - 0.1.0
+           * * [UPDATER]
+           * * (add version2 for updating source without rebuilding binary)
+           * * START
+           */
+          case "appVersion2":
+          case "buildID2":
+          /**
+           * * NORANEKO PATCH - 0.1.0
+           * * [UPDATER]
+           * * END
+           */
             this[attr.name] = attr.value;
             break;
           default:
@@ -2431,6 +2656,23 @@ class Update {
     if (this.elevationFailure) {
       update.setAttribute("elevationFailure", this.elevationFailure);
     }
+    /**
+     * * NORANEKO PATCH - 0.1.0
+     * * [UPDATER]
+     * * (add version2 for updating source without rebuilding binary)
+     * * START
+     */
+    if (this.appVersion2) {
+      update.setAttribute("appVersion2",this.appVersion2);
+    }
+    if (this.buildID2) {
+      update.setAttribute("buildID2",this.buildID2)
+    }
+    /**
+     * * NORANEKO PATCH - 0.1.0
+     * * [UPDATER]
+     * * END
+     */
 
     for (let [name, value] of Object.entries(this._properties)) {
       if (value.present && !this._attrNames.includes(name)) {
@@ -2540,6 +2782,10 @@ class Update {
   ]);
 }
 
+
+
+// MARK: UpdateService
+
 export class UpdateService {
   #initPromise;
 
@@ -3594,11 +3840,13 @@ export class UpdateService {
     return true;
   }
 
+
+
   /**
    * Determine the update from the specified updates that should be offered.
    * If both valid major and minor updates are available the minor update will
    * be offered.
-   * @param   updates
+   * @param {nsIUpdate[]} updates
    *          An array of available nsIUpdate items
    * @return  The nsIUpdate to offer.
    */
@@ -3619,6 +3867,8 @@ export class UpdateService {
     var vc = Services.vc;
     let lastCheckCode = AUSTLMY.CHK_NO_COMPAT_UPDATE_FOUND;
 
+
+
     for (const update of updates) {
       // Ignore updates for older versions of the application and updates for
       // the same version of the application with the same build ID.
@@ -3651,6 +3901,8 @@ export class UpdateService {
         continue;
       }
 
+
+
       switch (update.type) {
         case "major":
           if (!majorUpdate || majorUpdate.unsupported) {
@@ -3658,6 +3910,18 @@ export class UpdateService {
           } else if (
             !update.unsupported &&
             vc.compare(majorUpdate.appVersion, update.appVersion) <= 0
+            /**
+             * * NORANEKO PATCH - 0.1.0
+             * * [UPDATER]
+             * * (add version2 for updating source without rebuilding binary)
+             * * START
+             */
+            && vc.compare(majorUpdate.appVersion, update.appVersion) == 0 ? compareVersion2(parseVersion2(majorUpdate.appVersion2),parseVersion2(update.appVersion2), "<=") : true
+            /**
+             * * NORANEKO PATCH - 0.1.0
+             * * [UPDATER]
+             * * END
+             */
           ) {
             majorUpdate = update;
           }
@@ -3668,6 +3932,18 @@ export class UpdateService {
           } else if (
             !update.unsupported &&
             vc.compare(minorUpdate.appVersion, update.appVersion) <= 0
+            /**
+             * * NORANEKO PATCH - 0.1.0
+             * * [UPDATER]
+             * * (add version2 for updating source without rebuilding binary)
+             * * START
+             */
+            && vc.compare(majorUpdate.appVersion, update.appVersion) == 0 ? compareVersion2(parseVersion2(majorUpdate.appVersion2),parseVersion2(update.appVersion2), "<=") : true
+            /**
+             * * NORANEKO PATCH - 0.1.0
+             * * [UPDATER]
+             * * END
+             */
           ) {
             minorUpdate = update;
           }
@@ -4450,6 +4726,10 @@ export class UpdateService {
   ]);
 }
 
+
+
+// MARK: UpdateManager
+
 export class UpdateManager {
   /**
    * The nsIUpdate object for the update that has been downloaded.
@@ -5168,6 +5448,10 @@ export class UpdateManager {
   QueryInterface = ChromeUtils.generateQI([Ci.nsIUpdateManager]);
 }
 
+
+
+// MARK: CheckerService
+
 /**
  * CheckerService
  * Provides an interface for checking for new updates. When more checks are
@@ -5745,6 +6029,10 @@ export class CheckerService {
   QueryInterface = ChromeUtils.generateQI([Ci.nsIUpdateChecker]);
 }
 
+
+
+// MARK: Downloader
+
 class Downloader {
   /**
    * The nsIUpdatePatch that we are downloading
@@ -7204,6 +7492,10 @@ class Downloader {
   ]);
 }
 
+
+
+// MARK: RestartOnLastWindowClosed
+
 // On macOS, all browser windows can be closed without Firefox exiting. If it
 // is left in this state for a while and an update is pending, we should restart
 // Firefox on our own to apply the update. This class will do that
 
