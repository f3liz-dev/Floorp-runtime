---
# SPDX-License-Identifier: MPL-2.0

name: Pull Upstream

'on':
  workflow_dispatch:
  workflow_call:
  schedule:
    - cron: '40 11 * * *'  # 8:40 PM UTC+9 (11:40 AM UTC)

permissions:
  contents: write
  pull-requests: write

jobs:
  pull-upstream-and-check-patches:
    name: Pull upstream changes and validate patches
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./floorp_runtime

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v5
        with:
          ref: 'main'
          fetch-depth: 0
          path: floorp_runtime

      - name: Get current version
        id: old_version
        run: |
          OLD_VERSION=$(cat browser/config/version.txt)
          echo "version=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $OLD_VERSION"

      - name: Clone upstream Firefox repository
        run: |
          git clone -b release --single-branch \
            https://github.com/mozilla-firefox/firefox \
            --depth 1 ../upstream_release

      - name: Get upstream version
        id: new_version
        run: |
          NEW_VERSION=$(cat ../upstream_release/browser/config/version.txt)
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Upstream version: $NEW_VERSION"

      - name: Compare versions
        id: version_diff
        run: |
          OLD_VERSION="${{ steps.old_version.outputs.version }}"
          NEW_VERSION="${{ steps.new_version.outputs.version }}"

          IFS='.' read -r OLD_MAJOR OLD_MINOR OLD_PATCH <<< "$OLD_VERSION"
          IFS='.' read -r NEW_MAJOR NEW_MINOR NEW_PATCH <<< "$NEW_VERSION"

          if [ "$OLD_VERSION" = "$NEW_VERSION" ]; then
            echo "No version change detected"
            echo "change_type=no_version_change" >> $GITHUB_OUTPUT
          elif [ "$OLD_MAJOR" != "$NEW_MAJOR" ]; then
            echo "change_type=MAJOR" >> $GITHUB_OUTPUT
          elif [ "$OLD_MINOR" != "$NEW_MINOR" ]; then
            echo "change_type=MINOR" >> $GITHUB_OUTPUT
          elif [ "$OLD_PATCH" != "$NEW_PATCH" ]; then
            echo "change_type=PATCH" >> $GITHUB_OUTPUT
          else
            echo "change_type=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Check for existing PR
        id: check_pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pulls = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              base: 'main'
            });

            const syncPR = pulls.data.find(pr => 
              pr.title.match(/^sync: (MAJOR|MINOR|PATCH|no_version_change) upstream/) &&
              pr.user.login.includes('bot')
            );

            if (syncPR) {
              console.log(`Found existing PR #${syncPR.number}: ${syncPR.title}`);
              core.setOutput('exists', 'true');
              core.setOutput('number', syncPR.number);
              core.setOutput('branch', syncPR.head.ref);
            } else {
              console.log('No existing sync PR found');
              core.setOutput('exists', 'false');
            }

      - name: Checkout existing PR branch
        if: steps.check_pr.outputs.exists == 'true'
        run: |
          BRANCH_NAME="${{ steps.check_pr.outputs.branch }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin "$BRANCH_NAME"
          git checkout "$BRANCH_NAME"

      - name: Sync upstream files
        run: |
          mv ../upstream_release/README.md ../upstream_release/MOZ_README.md
          rsync -a --delete \
            --exclude='.git' \
            --exclude='/.github/' \
            --exclude='/floorp/' \
            --exclude='/.gitmodules' \
            --exclude='/README.md' \
            ../upstream_release/ ./

      - name: Normalize patch files
        run: |
          echo "Normalizing patch files..."
          find .github/patches/upstream -name "*.patch" \
            -exec dos2unix {} \; 2>/dev/null || true
          for patch_file in .github/patches/upstream/*.patch; do
            if [ -s "$patch_file" ] && \
               [ "$(tail -c1 "$patch_file" | wc -l)" -eq 0 ]; then
              echo "" >> "$patch_file"
            fi
          done

      - name: Check patches compatibility
        id: patch_check
        run: |
          echo "Checking patches for compatibility..."
          HAS_FAILED=0
          FAILED_PATCHES=""

          if [ -d ".github/patches/upstream" ]; then
            for patch_file in .github/patches/upstream/*.patch; do
              [ -e "$patch_file" ] || continue
              patch_name=$(basename "$patch_file")

              if git apply --check --ignore-space-change \
                 --ignore-whitespace "$patch_file"; then
                echo "✓ $patch_name applies cleanly"
              else
                echo "✗ $patch_name failed to apply"
                FAILED_PATCHES="$FAILED_PATCHES\n- $patch_name"
                HAS_FAILED=1
              fi
            done
          fi

          if [ "$HAS_FAILED" -ne 0 ]; then
            echo "FAILED_PATCHES<<EOF" >> $GITHUB_ENV
            echo -e "$FAILED_PATCHES" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "patch_failed=true" >> $GITHUB_OUTPUT
          else
            echo "All patches are compatible with upstream changes"
            echo "patch_failed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if there are any changes
        id: check_changes
        run: |
          if git diff --quiet --exit-code; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes from upstream."
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected from upstream."
          fi

      - name: Commit to existing PR branch
        if: steps.check_changes.outputs.has_changes == 'true' && steps.check_pr.outputs.exists == 'true'
        run: |
          CHANGE_TYPE="${{ steps.version_diff.outputs.change_type }}"
          VERSION="${{ steps.new_version.outputs.version }}"
          
          git add .
          
          if [ "$CHANGE_TYPE" = "no_version_change" ]; then
            git commit -m "sync: upstream gecko-dev (file changes without version change)"
          else
            git commit -m "sync: upstream gecko-dev $VERSION"
          fi
          
          git push origin "${{ steps.check_pr.outputs.branch }}"
          echo "BRANCH_NAME=${{ steps.check_pr.outputs.branch }}" >> $GITHUB_ENV
          echo "UPDATE_EXISTING=true" >> $GITHUB_ENV

      - name: Create new PR branch
        if: steps.check_changes.outputs.has_changes == 'true' && steps.check_pr.outputs.exists == 'false'
        run: |
          if git diff --quiet --exit-code; then
            echo "No changes from upstream. Exiting."
            exit 0
          fi

          CHANGE_TYPE="${{ steps.version_diff.outputs.change_type }}"
          VERSION="${{ steps.new_version.outputs.version }}"
          
          if [ "$CHANGE_TYPE" = "no_version_change" ]; then
            BRANCH_NAME="sync/upstream-no-version-$(date +%Y%m%d-%H%M%S)"
          else
            BRANCH_NAME="sync/upstream-$VERSION"
          fi
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b "$BRANCH_NAME"
          git add .
          
          if [ "$CHANGE_TYPE" = "no_version_change" ]; then
            git commit -m "sync: upstream gecko-dev (file changes without version change)"
          else
            git commit -m "sync: upstream gecko-dev $VERSION"
          fi
          
          git push origin "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "UPDATE_EXISTING=false" >> $GITHUB_ENV

      - name: Update existing PR
        if: steps.version_diff.outputs.change_type != 'none' && env.UPDATE_EXISTING == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = parseInt('${{ steps.check_pr.outputs.number }}');
            const oldVersion = '${{ steps.old_version.outputs.version }}';
            const newVersion = '${{ steps.new_version.outputs.version }}';
            const changeType = '${{ steps.version_diff.outputs.change_type }}';
            const patchFailed = '${{ steps.patch_check.outputs.patch_failed }}' === 'true';
            const failedPatches = process.env.FAILED_PATCHES || '';

            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            let newTitle = pr.data.title;
            let changelogEntry = '';

            if (changeType === 'no_version_change') {
              changelogEntry = `\n### File changes without version change\n`;
              changelogEntry += `- Synced at: ${new Date().toISOString()}\n`;
              if (patchFailed) {
                changelogEntry += `- ⚠️ Patch issues detected:\n${failedPatches}\n`;
              } else {
                changelogEntry += `- ✅ All patches applied successfully\n`;
              }
            } else {
              const titleMatch = pr.data.title.match(/^sync: (MAJOR|MINOR|PATCH|no_version_change) upstream ([\d.]+) → ([\d.]+)$/);
              const originalStartVersion = titleMatch ? titleMatch[2] : oldVersion;
              newTitle = `sync: ${changeType} upstream ${originalStartVersion} → ${newVersion}`;

              changelogEntry = `\n### ${newVersion}\n`;
              changelogEntry += `- Synced at: ${new Date().toISOString()}\n`;
              if (patchFailed) {
                changelogEntry += `- ⚠️ Patch issues detected:\n${failedPatches}\n`;
              } else {
                changelogEntry += `- ✅ All patches applied successfully\n`;
              }
            }

            const newBody = pr.data.body + changelogEntry;

            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              title: newTitle,
              body: newBody
            });

      - name: Create new Pull Request
        if: steps.check_changes.outputs.has_changes == 'true' && env.UPDATE_EXISTING == 'false' && env.BRANCH_NAME != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const oldVersion = '${{ steps.old_version.outputs.version }}';
            const newVersion = '${{ steps.new_version.outputs.version }}';
            const changeType = '${{ steps.version_diff.outputs.change_type }}';
            const patchFailed = '${{ steps.patch_check.outputs.patch_failed }}' === 'true';
            const failedPatches = process.env.FAILED_PATCHES || '';

            let title, body;

            if (changeType === 'no_version_change') {
              title = `sync: no_version_change upstream ${oldVersion}`;
              
              body = `## Upstream Sync\n\n`;
              body += `- **Current version**: ${oldVersion}\n`;
              body += `- **Change type**: File changes without version change\n\n`;
              
              body += `## Version History\n\n`;
              body += `### File changes without version change\n`;
              body += `- Synced at: ${new Date().toISOString()}\n`;
              
              if (patchFailed) {
                body += `- ⚠️ Patch issues detected:\n${failedPatches}\n`;
              } else {
                body += `- ✅ All patches applied successfully\n`;
              }
            } else {
              title = `sync: ${changeType} upstream ${oldVersion} → ${newVersion}`;
              
              body = `## Upstream Sync\n\n`;
              body += `- **Previous version**: ${oldVersion}\n`;
              body += `- **New version**: ${newVersion}\n`;
              body += `- **Change type**: ${changeType}\n\n`;
              
              body += `## Version History\n\n`;
              body += `### ${newVersion}\n`;
              body += `- Synced at: ${new Date().toISOString()}\n`;
              
              if (patchFailed) {
                body += `- ⚠️ Patch issues detected:\n${failedPatches}\n`;
              } else {
                body += `- ✅ All patches applied successfully\n`;
              }
            }

            await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              head: process.env.BRANCH_NAME,
              base: 'main',
              body: body
            });
