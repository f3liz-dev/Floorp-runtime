# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

on:
  workflow_call:
    inputs:
      debug:
        type: boolean
        default: true
      pgo:
        type: boolean
        default: false

jobs:
  linux-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [ "amd64", "aarch64" ]
    steps:
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "latest"

    - name: Clone üß¨
      uses: actions/checkout@v4
      with:
        submodules: "true"

    # - name: Configure sccache
    #   uses: actions/github-script@v7
    #   with:
    #     script: |
    #       core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
    #       core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    # - name: Setup Rust ü¶Ä
    #   run: |
    #     rustup default nightly
    #     rustup target add x86_64-unknown-linux-gnu
    #     export CARGO_INCREMENTAL=0

    - name: Setup Rust ü¶Ä
      run: |
        rustup default stable
        if [[ ${{ matrix.arch }} == "aarch64" ]]; then
          rustup target add aarch64-unknown-linux-gnu
        else
          rustup target add x86_64-unknown-linux-gnu
        fi
        export CARGO_INCREMENTAL=0

    - name: Allocate swap
      run: |
        echo "Before:"
        free -h
        df -h

        sudo swapoff /mnt/swapfile || true
        sudo rm /mnt/swapfile || true
        sudo fallocate -l 15G /mnt/swapfile
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile

        sudo apt autoremove -y
        sudo apt clean
        sudo rm -rf ./git /home/linuxbrew /usr/share/dotnet /usr/local/lib/android /usr/local/graalvm
        sudo rm -rf /usr/local/share/powershell /usr/local/share/chromium /opt/ghc /usr/local/share/boost
        sudo rm -rf /etc/apache2 /etc/nginx /usr/local/share/chrome_driver /usr/local/share/edge_driver
        sudo rm -rf /usr/local/share/gecko_driver /usr/share/java /usr/share/miniconda /usr/local/share/vcpkg

        echo "After:"
        free -h
        df -h

    - name: Setup ü™õ
      run: |
        cd $GITHUB_WORKSPACE

        if [[ ${{ matrix.arch }} == "aarch64" ]]; then
          cp ./.github/workflows/mozconfigs/linux64-aarch64.mozconfig mozconfig
        else
          cp ./.github/workflows/mozconfigs/linux64.mozconfig mozconfig
        fi
        cp -r ./floorp/gecko/branding/* ./browser/branding/
        sudo apt install msitools -y

        # Set Branding
        echo "ac_add_options --with-branding=browser/branding/floorp-official" >> mozconfig

        # Set Flat Chrome
        echo "ac_add_options --enable-chrome-format=flat" >> mozconfig

        # echo "mk_add_options 'export RUSTC_WRAPPER=/home/runner/.mozbuild/sccache/sccache'" >> mozconfig
        # echo "mk_add_options 'export CCACHE_CPP2=yes'" >> mozconfig
        # echo "ac_add_options --with-ccache=/home/runner/.mozbuild/sccache/sccache" >> mozconfig
        # echo "mk_add_options 'export SCCACHE_GHA_ENABLED=on'" >> mozconfig

        if [[ $GHA_debug == 'true' ]]; then
          echo "ac_add_options --enable-debug" >> mozconfig
          git apply --ignore-space-change --reject --ignore-whitespace .github/patches/dev/*.patch
        fi

        if [[ $GHA_pgo == 'true' ]]; then
          echo "ac_add_options MOZ_PGO=1" >> mozconfig
        fi

        # Update Channel
        echo "ac_add_options --enable-update-channel=release" >> mozconfig
        echo "ac_add_options --with-version-file-path=floorp/gecko/config" >> mozconfig
        sed -i 's|https://@MOZ_APPUPDATE_HOST@/update/6/%PRODUCT%/%VERSION%/%BUILD_ID%/%BUILD_TARGET%/%LOCALE%/%CHANNEL%/%OS_VERSION%/%SYSTEM_CAPABILITIES%/%DISTRIBUTION%/%DISTRIBUTION_VERSION%/update.xml|https://%NORA_UPDATE_HOST%update.xml|g' ./build/application.ini.in

        ./mach --no-interactive bootstrap --application-choice browser
      env:
        GHA_debug: ${{ inputs.debug }}
        GHA_pgo: ${{ inputs.pgo }}

    - name: Mach Configure
      run: |
        ./mach configure

    - name: Build üî®
      run: |
        Xvfb :2 -screen 0 1024x768x24 &
        export DISPLAY=:2
        ./mach build
        ./mach package
        rm -rf ~/.cargo

    # Publish START
    - name: Extract Package üì¶
      run: |
        if [[ ${{ matrix.arch }} == "aarch64" ]]; then
          mv obj-aarch64-unknown-linux-gnu/dist/floorp-*.tar.xz ./floorp-linux-aarch64-moz-artifact.tar.xz
          cp ./obj-aarch64-unknown-linux-gnu/dist/bin/application.ini ./nora-application.ini
        else
          mv obj-x86_64-pc-linux-gnu/dist/floorp-*.tar.xz ./floorp-linux-amd64-moz-artifact.tar.xz
          cp ./obj-x86_64-pc-linux-gnu/dist/bin/application.ini ./nora-application.ini
        fi

    - name: Publish Package Mozilla Artifact üéÅ
      uses: actions/upload-artifact@v4
      with:
        name: floorp-linux-${{ matrix.arch }}-moz-artifact
        path: ./floorp-linux-*-moz-artifact.tar.xz
        overwrite: true

    - name: Prepare dist/host for MAR
      run: |
        if [[ ${{ matrix.arch }} == "aarch64" ]]; then
          mv obj-aarch64-unknown-linux-gnu/dist/host ./dist-host
        else
          mv obj-x86_64-pc-linux-gnu/dist/host ./dist-host
        fi

    - name: Publish dist/host for MAR
      uses: actions/upload-artifact@v4
      with:
        name: linux-${{ matrix.arch }}-dist-host
        path: ./dist-host/
        overwrite: true

    - name: Publish nora-application.ini for MAR
      uses: actions/upload-artifact@v4
      with:
        name: linux-${{ matrix.arch }}-application-ini
        path: ./nora-application.ini
        overwrite: true
    # Publish END
