# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

on:
  workflow_call:
    inputs:
      release:
        type: boolean
        default: true
      debug:
        type: boolean
        default: true
      code-coverage:
        type: boolean
        default: false
      profile-generate-mode:
        type: boolean
        default: false
      build-with-profdata-and-jarlog:
          type: boolean
          required: false
      MOZ_BUILD_DATE:
        type: string
        required: true
        default: ""

jobs:
  download-macos-sdk:
    runs-on: macos-15
    steps:
      - name: Get macOS SDK path
        id: get-sdk
        run: |
          sudo xcode-select -s /Applications/Xcode_16.3.app

          SDK_PATH=$(xcrun --sdk macosx --show-sdk-path)
          echo "SDK_PATH=$SDK_PATH" >> $GITHUB_ENV
          echo "sdk_path=$SDK_PATH" >> $GITHUB_OUTPUT
      - name: Tar and upload macOS SDK as artifact
        run: |
          tar -czf macos_sdk.tar.gz -C "${{ env.SDK_PATH }}" .
      - name: Upload macOS SDK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-sdk
          path: macos_sdk.tar.gz
          retention-days: 1
          overwrite: true

  mac-build:
    runs-on: ${{ matrix.runs-on }}
    needs: download-macos-sdk
    timeout-minutes: 360
    strategy:
      matrix:
        runs-on: ["ubuntu-latest"]
        arch: [x86_64, aarch64]
    steps:
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "latest"

    - name: Clone üß¨
      uses: actions/checkout@v4
      with:
        submodules: "recursive"

    - name: Download macOS SDK
      uses: actions/download-artifact@v4
      with:
        name: macos-sdk
        path: ~/macos-sdk-artifact

    - name: Extract macOS SDK
      run: |
        mkdir -p ~/macos-sdk
        tar -xzf ~/macos-sdk-artifact/macos_sdk.tar.gz -C ~/macos-sdk --warning=no-unknown-keyword

    # - name: Configure sccache
    #   uses: actions/github-script@v7
    #   with:
    #     script: |
    #       core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
    #       core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: setup Rust ü¶Ä
      run: |
        # # Install Rust if pgo_artifact_name is not empty
        # if [[ -n $GHA_pgo_artifact_name ]]; then
        #   rustup toolchain install 1.81.0
        #   rustup default 1.81.0
        # fi

        if [[ $GHA_ARCH == 'x86_64' ]];then
            rustup target add x86_64-apple-darwin
        else
            rustup target add aarch64-apple-darwin
        fi

        # #? https://github.com/mozilla/sccache#known-caveats
        # export CARGO_INCREMENTAL=0
      env:
        GHA_ARCH: ${{matrix.arch}}
        GHA_pgo_artifact_name: ${{inputs.build-with-profdata-and-jarlog}}

    - name: Set LLVM environment variables
      run: |
        echo "LLVM_VERSION=19" >> $GITHUB_ENV
        if [[ $GHA_ARCH == 'x86_64' ]];then
            echo "TARGET_TRIPLE=x86_64-apple-darwin" >> $GITHUB_ENV
        else
            echo "TARGET_TRIPLE=aarch64-apple-darwin" >> $GITHUB_ENV
        fi
        echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
      env:
        GHA_ARCH: ${{matrix.arch}}

    - name: Check LLVM toolchain versions
      run: |
        echo "=== Checking LLVM Toolchain Versions ==="
        echo "Clang version:"
        clang --version

        echo -e "\nChecking for cross-compile tools:"
        which clang || echo "clang not found"
        which lld || echo "lld not found"
        which ld || echo "ld not found"

        echo -e "\nChecking cctools (macOS cross-compile tools):"
        find /usr -name "*ld64*" 2>/dev/null || echo "ld64 tools not found"
        find ~/macos-sdk -name "*ld*" 2>/dev/null || echo "No ld tools in SDK"

        echo -e "\nEnvironment variables:"
        echo "TARGET_TRIPLE=$TARGET_TRIPLE"
        echo "MACOSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET"
        echo "PATH=$PATH"

    - name: Allocate swap
      run: |
        echo Before:
        free -h
        df -h

        echo
        echo

        sudo swapoff /mnt/swapfile
        sudo rm /mnt/swapfile
        sudo fallocate -l 20G /mnt/swapfile
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile

        sudo apt autoremove -y
        sudo apt clean
        sudo rm -rf  ./git
        sudo rm -rf /home/linuxbrew
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /usr/local/graalvm
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/local/share/chromium
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /etc/apache2
        sudo rm -rf /etc/nginx
        sudo rm -rf /usr/local/share/chrome_driver
        sudo rm -rf /usr/local/share/edge_driver
        sudo rm -rf /usr/local/share/gecko_driver
        sudo rm -rf /usr/share/java
        sudo rm -rf /usr/share/miniconda
        sudo rm -rf /usr/local/share/vcpkg

        echo
        echo

        echo After:
        free -h
        df -h

    - name: Download PGO Artifact if exists
      if: inputs.build-with-profdata-and-jarlog
      uses: actions/download-artifact@v4
      with:
        name: floorp-${{ matrix.arch }}-apple-darwin-profdata-and-jarlog
        path: ~/artifacts

    - name: Setup ü™õ
      run: |
        if [[ -n ${{ inputs.MOZ_BUILD_DATE }} ]];then
          export MOZ_BUILD_DATE=${{ inputs.MOZ_BUILD_DATE }}
        fi

        cd $GITHUB_WORKSPACE

        # update floorp to latest
        git submodule update --remote

        if [[ $GHA_ARCH == 'x86_64' ]];then
          cp ./.github/workflows/mozconfigs/macosx64-x86_64.mozconfig mozconfig
        else
          cp ./.github/workflows/mozconfigs/macosx64-aarch64.mozconfig mozconfig
        fi

        # Add macOS SDK path
        echo "ac_add_options --with-macos-sdk=$(echo ~)/macos-sdk" >> mozconfig

        # Copy Floorp Branding
        cp -r ./floorp/gecko/branding/* ./browser/branding/

        # Set Branding
        echo "ac_add_options --with-branding=browser/branding/floorp-official" >> mozconfig

        # Set Flat Chrome
        if [[ $GHA_profgen != 'true' ]]; then
          echo "ac_add_options --enable-chrome-format=flat" >> mozconfig
        fi

        # Enable Linker
        echo "ac_add_options --enable-linker=lld" >> mozconfig

        # Install msitools
        sudo apt install msitools -y

        # SCCACHE START
        # echo "mk_add_options 'export RUSTC_WRAPPER=/home/runner/.mozbuild/sccache/sccache'" >> mozconfig
        # echo "mk_add_options 'export CCACHE_CPP2=yes'" >> mozconfig
        # echo "ac_add_options --with-ccache=/home/runner/.mozbuild/sccache/sccache" >> mozconfig
        # echo "mk_add_options 'export SCCACHE_GHA_ENABLED=on'" >> mozconfig
        # SCCACHE END

        # Debug
        if [[ $GHA_debug == 'true' ]]; then
          echo "ac_add_options --enable-debug" >> mozconfig
        fi

        if [[ $GHA_profgen == 'true' ]]; then
          echo 'ac_add_options --enable-profile-generate=cross' >> mozconfig
         elif [[ $GHA_profdata_jarlog_artifact_name == 'true' ]]; then
          echo 'export MOZ_LTO=cross' >> mozconfig
          echo 'ac_add_options --enable-profile-use=cross' >> mozconfig
          echo 'ac_add_options --with-pgo-profile-path=$(echo ~)/artifacts/merged.profdata' >> mozconfig
          echo 'ac_add_options --with-pgo-jarlog=$(echo ~)/artifacts/en-US.log' >> mozconfig
        fi

        # Update Channel
        echo "ac_add_options --enable-update-channel=release" >> mozconfig
        echo "ac_add_options --with-version-file-path=floorp/gecko/config" >> mozconfig
        sed -i 's|https://@MOZ_APPUPDATE_HOST@/update/6/%PRODUCT%/%VERSION%/%BUILD_ID%/%BUILD_TARGET%/%LOCALE%/%CHANNEL%/%OS_VERSION%/%SYSTEM_CAPABILITIES%/%DISTRIBUTION%/%DISTRIBUTION_VERSION%/update.xml|https://%NORA_UPDATE_HOST%update.xml|g' ./build/application.ini.in

        ./mach --no-interactive bootstrap --application-choice browser
      env:
        GHA_ARCH: ${{matrix.arch}}
        GHA_debug: ${{inputs.debug}}
        GHA_release: ${{inputs.release}}
        GHA_codecov: ${{inputs.code-coverage}}
        GHA_profgen: ${{ inputs.profile-generate-mode }}
        GHA_profdata_jarlog_artifact_name : ${{inputs.build-with-profdata-and-jarlog}}

    - name: Mach Configure
      run: |
        if [[ -n ${{ inputs.MOZ_BUILD_DATE }} ]];then
          export MOZ_BUILD_DATE=${{ inputs.MOZ_BUILD_DATE }}
        fi

        ./mach configure

    - name: Build üî®
      run: |
        if [[ -n ${{ inputs.MOZ_BUILD_DATE }} ]];then
          export MOZ_BUILD_DATE=${{ inputs.MOZ_BUILD_DATE }}
        fi

        export MOZ_NUM_JOBS=$(( $(nproc) * 3 / 4 ))
        nice -n 10 ./mach build --jobs=$MOZ_NUM_JOBS

    - name: Package üì¶
      run: |
        ./mach package
        rm -rf ~/.cargo

    - name: Copy & Compress Artifacts üìÅ
      run: |
        mkdir ~/output
        if [[ $GHA_ARCH == 'aarch64' ]];then
          arch="aarch64"
        else
          arch="x86_64"
        fi

        if [[ $GHA_profgen = 'true' ]];then
        tar zcvf ${arch}-apple-darwin-output.tar.xz ./obj-${arch}-apple-darwin/dist/
          mv ${arch}-apple-darwin-output.tar.xz ~/output/
        else
          tar -czf floorp-${arch}-apple-darwin-with-pgo.tar.gz ./obj-${arch}-apple-darwin/dist/
          mv floorp-${arch}-apple-darwin-with-pgo.tar.gz ~/output/
        fi
      env:
        GHA_profgen: ${{ inputs.profile-generate-mode }}
        GHA_ARCH: ${{ matrix.arch }}

    # Publish START
    - name: Publish PackageüéÅ
      uses: actions/upload-artifact@v4
      with:
        name: floorp-mac-${{ matrix.arch }}-${{fromJson('["package","build-with-profgen"]')[inputs.profile-generate-mode]}}
        compression-level: 9
        path: ~/output/
    # Publish END
